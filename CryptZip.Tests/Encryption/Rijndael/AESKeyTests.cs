using System;
using CryptZip.Encryption.Rijndael;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace CryptZip.Tests.Encryption.Rijndael
{
    [TestClass]
    public class AESKeyTests
    {
        [TestMethod]
        public void Constructor_Contructs128BitKeyWithExpansion_Expanded()
        {
            byte[] keyBytes = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F };
            AESKey key = new AESKey(keyBytes);
            byte[] expected = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
                            0xD6, 0xAA, 0x74, 0xFD, 0xD2, 0xAF, 0x72, 0xFA, 0xDA, 0xA6, 0x78, 0xF1, 0xD6, 0xAB, 0x76, 0xFE,
                            0xB6, 0x92, 0xCF, 0x0B, 0x64, 0x3D, 0xBD, 0xF1, 0xBE, 0x9B, 0xC5, 0x00, 0x68, 0x30, 0xB3, 0xFE,
                            0xB6, 0xFF, 0x74, 0x4E, 0xD2, 0xC2, 0xC9, 0xBF, 0x6C, 0x59, 0x0C, 0xBF, 0x04, 0x69, 0xBF, 0x41,
                            0x47, 0xF7, 0xF7, 0xBC, 0x95, 0x35, 0x3E, 0x03, 0xF9, 0x6C, 0x32, 0xBC, 0xFD, 0x05, 0x8D, 0xFD,
                            0x3C, 0xAA, 0xA3, 0xE8, 0xA9, 0x9F, 0x9D, 0xEB, 0x50, 0xF3, 0xAF, 0x57, 0xAD, 0xF6, 0x22, 0xAA,
                            0x5E, 0x39, 0x0F, 0x7D, 0xF7, 0xA6, 0x92, 0x96, 0xA7, 0x55, 0x3D, 0xC1, 0x0A, 0xA3, 0x1F, 0x6B,
                            0x14, 0xF9, 0x70, 0x1A, 0xE3, 0x5F, 0xE2, 0x8C, 0x44, 0x0A, 0xDF, 0x4D, 0x4E, 0xA9, 0xC0, 0x26,
                            0x47, 0x43, 0x87, 0x35, 0xA4, 0x1C, 0x65, 0xB9, 0xE0, 0x16, 0xBA, 0xF4, 0xAE, 0xBF, 0x7A, 0xD2,
                            0x54, 0x99, 0x32, 0xD1, 0xF0, 0x85, 0x57, 0x68, 0x10, 0x93, 0xED, 0x9C, 0xBE, 0x2C, 0x97, 0x4E,
                            0x13, 0x11, 0x1D, 0x7F, 0xE3, 0x94, 0x4A, 0x17, 0xF3, 0x07, 0xA7, 0x8B, 0x4D, 0x2B, 0x30, 0xC5};
            CollectionAssert.AreEqual(expected, key.Bytes);
        }

        [TestMethod]
        public void Constructor_Contructs192BitKeyWithExpansion_Expanded()
        {
            byte[] keyBytes =
            {
                0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
                0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17
            };
            AESKey key = new AESKey(keyBytes);
            byte[] expected = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x58, 0x46, 0xF2, 0xF9, 0x5C, 0x43, 0xF4, 0xFE, 0x54, 0x4A, 0xFE, 0xF5, 0x58, 0x47, 0xF0, 0xFA, 0x48, 0x56, 0xE2, 0xE9, 0x5C, 0x43, 0xF4, 0xFE, 0x40, 0xF9, 0x49, 0xB3, 0x1C, 0xBA, 0xBD, 0x4D, 0x48, 0xF0, 0x43, 0xB8, 0x10, 0xB7, 0xB3, 0x42, 0x58, 0xE1, 0x51, 0xAB, 0x04, 0xA2, 0xA5, 0x55, 0x7E, 0xFF, 0xB5, 0x41, 0x62, 0x45, 0x08, 0x0C, 0x2A, 0xB5, 0x4B, 0xB4, 0x3A, 0x02, 0xF8, 0xF6, 0x62, 0xE3, 0xA9, 0x5D, 0x66, 0x41, 0x0C, 0x08, 0xF5, 0x01, 0x85, 0x72, 0x97, 0x44, 0x8D, 0x7E, 0xBD, 0xF1, 0xC6, 0xCA, 0x87, 0xF3, 0x3E, 0x3C, 0xE5, 0x10, 0x97, 0x61, 0x83, 0x51, 0x9B, 0x69, 0x34, 0x15, 0x7C, 0x9E, 0xA3, 0x51, 0xF1, 0xE0, 0x1E, 0xA0, 0x37, 0x2A, 0x99, 0x53, 0x09, 0x16, 0x7C, 0x43, 0x9E, 0x77, 0xFF, 0x12, 0x05, 0x1E, 0xDD, 0x7E, 0x0E, 0x88, 0x7E, 0x2F, 0xFF, 0x68, 0x60, 0x8F, 0xC8, 0x42, 0xF9, 0xDC, 0xC1, 0x54, 0x85, 0x9F, 0x5F, 0x23, 0x7A, 0x8D, 0x5A, 0x3D, 0xC0, 0xC0, 0x29, 0x52, 0xBE, 0xEF, 0xD6, 0x3A, 0xDE, 0x60, 0x1E, 0x78, 0x27, 0xBC, 0xDF, 0x2C, 0xA2, 0x23, 0x80, 0x0F, 0xD8, 0xAE, 0xDA, 0x32, 0xA4, 0x97, 0x0A, 0x33, 0x1A, 0x78, 0xDC, 0x09, 0xC4, 0x18, 0xC2, 0x71, 0xE3, 0xA4, 0x1D, 0x5D };
            CollectionAssert.AreEqual(expected, key.Bytes);
        }

        [TestMethod]
        public void Constructor_Contructs256BitKeyWithExpansion_Expanded()
        {
            byte[] keyBytes =
            {
                0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
                0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25
            };
            AESKey key = new AESKey(keyBytes);
            byte[] expected = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x27, 0x37, 0x3D, 0x90, 0x23, 0x32, 0x3B, 0x97, 0x2B, 0x3B, 0x31, 0x9C, 0x27, 0x36, 0x3F, 0x93, 0xDC, 0x14, 0x67, 0xCF, 0xC8, 0x01, 0x71, 0xD8, 0xD0, 0x18, 0x51, 0xF9, 0xF2, 0x3B, 0x75, 0xDC, 0xC7, 0xAA, 0xBB, 0x19, 0xE4, 0x98, 0x80, 0x8E, 0xCF, 0xA3, 0xB1, 0x12, 0xE8, 0x95, 0x8E, 0x81, 0x47, 0x3E, 0x7E, 0xC3, 0x8F, 0x3F, 0x0F, 0x1B, 0x5F, 0x27, 0x5E, 0xE2, 0xAD, 0x1C, 0x2B, 0x3E, 0x5F, 0x5B, 0x09, 0x8C, 0xBB, 0xC3, 0x89, 0x02, 0x74, 0x60, 0x38, 0x10, 0x9C, 0xF5, 0xB6, 0x91, 0x99, 0xD8, 0x30, 0x42, 0x16, 0xE7, 0x3F, 0x59, 0x49, 0xC0, 0x61, 0xBB, 0xE4, 0xDC, 0x4A, 0x85, 0xD1, 0x8D, 0x9E, 0xE5, 0x6A, 0x4E, 0x17, 0xE7, 0x1E, 0x2E, 0x2F, 0xF7, 0x82, 0xDB, 0x99, 0x66, 0x8A, 0x61, 0xDE, 0x71, 0x9C, 0x86, 0xE1, 0x28, 0xD5, 0x46, 0x80, 0x93, 0x31, 0x9A, 0xCA, 0x16, 0x79, 0xF9, 0xD9, 0x22, 0x13, 0xB7, 0xCE, 0xC5, 0x0D, 0x99, 0xE1, 0x32, 0x8F, 0x42, 0x78, 0x54, 0xF9, 0x4D, 0x62, 0x51, 0x65, 0xCB, 0x83, 0x79, 0xB0, 0x8D, 0x03, 0xEA, 0x81, 0x17, 0xC9, 0xFC, 0xA9, 0x24, 0x69, 0x2E, 0xBA, 0x93, 0xA7, 0xEB, 0xB7, 0x0A, 0x46, 0xD9, 0x38, 0x48, 0x3E, 0x8D, 0xFE, 0x1F, 0xD0, 0x0C, 0x9B, 0xD4, 0x53, 0x75, 0x2B, 0x59, 0x50, 0x9F, 0xAA, 0x4E, 0x99, 0x63, 0xC6, 0xCA, 0x92, 0x82, 0x7C, 0x59, 0x35, 0x69, 0xCB, 0x53, 0x73, 0xB0, 0xF3, 0x1B, 0x4D, 0x3D};
            CollectionAssert.AreEqual(expected, key.Bytes);
        }

        [TestMethod]
        public void Constructor_ProvidesThreeKeysWithCorrectLength_Expanded()
        {
            byte[] k128bit = new byte[16];
            Assert.AreEqual(176, new AESKey(k128bit).Bytes.Length);
            byte[] k192bit = new byte[24];
            Assert.AreEqual(208, new AESKey(k192bit).Bytes.Length);
            byte[] k256bit = new byte[32];
            Assert.AreEqual(240, new AESKey(k256bit).Bytes.Length);
        }

        [TestMethod]
        [ExpectedException(typeof(ArgumentException))]
        public void Constructor_ProvidesKeyWithInvalidLength_ExceptionThrown()
        {
            byte[] keyBytes = new byte[5];
            new AESKey(keyBytes);
        }

        [TestMethod]
        public void NextSubKey_GetsNextSubKey_Received()
        {
            byte[] keyBytes =
            {
                0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c
            };
            AESKey key = new AESKey(keyBytes);

            byte[][] expected =
            {
                new byte[] {0x2b, 0x28, 0xab, 0x09},
                new byte[] {0x7e, 0xae, 0xf7, 0xcf},
                new byte[] {0x15, 0xd2, 0x15, 0x4f},
                new byte[] {0x16, 0xa6, 0x88, 0x3c}
            };

            byte[][] result = key.NextSubKey();

            for (int i = 0; i < result.Length; i++)
                for (int j = 0; j < result[i].Length; j++)
                    Assert.AreEqual(expected[j][i], result[j][i]);
        }

        [TestMethod]
        public void NextSubKey_GetsTwoNextSubKeys_Received()
        {
            byte[] keyBytes =
            {
                0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c
            };
            AESKey key = new AESKey(keyBytes);

            byte[][] expected =
            {
                new byte[] {0xa0, 0x88, 0x23, 0x2a},
                new byte[] {0xfa, 0x54, 0xa3, 0x6c},
                new byte[] {0xfe, 0x2c, 0x39, 0x76},
                new byte[] {0x17, 0xb1, 0x39, 0x05}
            };

            key.NextSubKey();

            byte[][] result = key.NextSubKey();

            for (int i = 0; i < result.Length; i++)
                for (int j = 0; j < result[i].Length; j++)
                    Assert.AreEqual(expected[j][i], result[j][i]);
        }

        [TestMethod]
        public void PreviousSubKey_GetsPreviousSubKey_Received()
        {
            byte[] keyBytes =
            {
                0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c
            };
            AESKey key = new AESKey(keyBytes);

            byte[][] expected =
            {
                new byte[] {0xd0, 0xc9, 0xe1, 0xb6},
                new byte[] {0x14, 0xee, 0x3f, 0x63},
                new byte[] {0xf9, 0x25, 0x0c, 0x0c},
                new byte[] {0xa8, 0x89, 0xc8, 0xa6}
            };

            byte[][] result = key.PreviousSubKey();

            for (int i = 0; i < result.Length; i++)
                for (int j = 0; j < result[i].Length; j++)
                    Assert.AreEqual(expected[j][i], result[j][i]);
        }
    }
}